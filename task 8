import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Load the dataset
file_path = '/kaggle/input/ipl-data/IPL2013.csv'
data = pd.read_csv(file_path)

# Preprocessing
# Encode categorical variables if any
label_encoders = {}
for column in data.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = le

# Feature selection
X = data.drop(columns=['SOLD PRICE'])   # match the exact column name
y = data['SOLD PRICE']                  # target column

# Build correlation matrix
correlation_matrix = data.corr()

# Visualize the heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Matrix Heatmap")
plt.show()

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Develop a regression model
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# Predict on train and test data
y_train_pred = regressor.predict(X_train)
y_test_pred = regressor.predict(X_test)

# Calculate RMSE
rmse_train = np.sqrt(mean_squared_error(y_train, y_train_pred))
rmse_test = np.sqrt(mean_squared_error(y_test, y_test_pred))

# Output the results
print("RMSE for Training Data:", rmse_train)
print("RMSE for Testing Data:", rmse_test)
